VAGRANTFILE_API_VERSION = "2"

IMAGE_NAME = "ubuntu/jammy64"

MASTER_IP = "10.0.0.11"
WORKER_NODE_COUNT = 1 # Number of worker VMs to create
WORKER_IP_START = "10.0.0." # first worker IP is 10.0.0.21

MASTER_MEM = 2048
MASTER_CPUS = 2
WORKER_MEM = 4096
WORKER_CPUS = 2

POD_CIDR = "10.244.0.0/16"
DNS_SERVERS = "8.8.8.8 1.1.1.1"

# Specify the box to use
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = IMAGE_NAME
  config.ssh.keep_alive = true

  # Disable automatic SSH key insertion by Vagrant
  config.ssh.insert_key = false

  config.vm.define "master" do |master|
    master.vm.hostname = "master-node"
    master.vm.network "private_network", ip: MASTER_IP
    master.vm.provider "virtualbox" do |vb|
      vb.name = "master"
      vb.cpus = MASTER_CPUS
      vb.memory = MASTER_MEM
    end

    config.vm.provision "shell",
    env: {
      "MASTER_IP" => MASTER_IP,
      "WORKER_NODE_COUNT" => WORKER_NODE_COUNT,
      "WORKER_IP_START" => WORKER_IP_START
    },
    inline: <<-SHELL
      apt-get update -y
      echo "$MASTER_IP master" >> /etc/hosts
      for i in `seq 1 ${WORKER_NODE_COUNT}`; do
        echo "$WORKER_IP_START$(($WORKER_NODE_COUNT+20)) worker-${i}" >> /etc/hosts
      done
    SHELL

    master.vm.provision "shell",
    env: {
      "DNS_SERVERS" => DNS_SERVERS,
      "VM_IP" => MASTER_IP
    },
    path: "scripts/common.sh"
    
    master.vm.provision "shell",
      env: {
        "MASTER_IP" => MASTER_IP,
        "POD_CIDR" => POD_CIDR
      },
      path: "scripts/master.sh"
  end

  (1..WORKER_NODE_COUNT).each do |i|
    config.vm.define "worker-#{i}" do |worker|
      worker.vm.hostname = "worker-#{i}"
      worker.vm.network "private_network", ip: WORKER_IP_START + "#{20+i}"
      
      worker.vm.network "forwarded_port", guest: 9200, host: 9200
      worker.vm.network "forwarded_port", guest: 9300, host: 9300

      worker.vm.provider "virtualbox" do |vb|
        vb.name = "worker-#{i}"
        vb.cpus = WORKER_CPUS
        vb.memory = WORKER_MEM
      end

      worker.vm.provision "shell",
      env: {
        "DNS_SERVERS" => DNS_SERVERS,
        "VM_IP" => WORKER_IP_START + "#{20+i}"
      },
      path: "scripts/common.sh"

      worker.vm.provision "shell", path: "scripts/worker.sh"
    end
  end

  # Provisioner to copy public key during provisioning
  config.vm.provision "shell" do |s|
    ssh_pub_key = File.readlines("./id_rsa.pub").first.strip
    s.inline = <<-SHELL
      echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
      echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
    SHELL
  end
end